{"version":3,"sources":["components/Map.jsx","components/WorldData.jsx","App.js","serviceWorker.js","index.js"],"names":["echarts","registerMap","world","Map","props","state","dataset","myChart","init","document","getElementById","fetch","then","response","json","myJson","console","log","results","dataSet","map","item","countryName","locationId","name","value","deadCount","curedCount","currentConfirmedCount","confirmedCount","push","options","title","sublink","left","top","tooltip","trigger","formatter","params","data","visualMap","min","max","text","realtime","calculable","inRange","color","series","type","mapType","roam","itemStyle","emphasis","label","show","nameMap","setOption","id","Component","WorldData","confirmed","death","myjson","setState","latest","deaths","className","this","TabPane","Tabs","App","defaultActiveKey","tabPosition","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3344f79.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport echarts from 'echarts/lib/echarts';\r\nimport world from 'echarts/map/json/world';\r\nimport 'echarts/map/js/world';\r\nimport '../App.css';\r\nimport './style.css';\r\necharts.registerMap('world', world);\r\n\r\n\r\n\r\n\r\n\r\nclass Map extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {dataset: null};\r\n        \r\n    }\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        //var data = [];\r\n\r\n        var myChart = echarts.init(document.getElementById(\"main\"));\r\n        fetch('https://lab.isaaclin.cn/nCoV/api/area?lang=en')\r\n            .then(function(response) {\r\n                return response.json();\r\n            })\r\n            .then((myJson) => {\r\n                console.log(myJson.results);\r\n                // var res = myJson.locations;\r\n                \r\n                let dataSet = myJson.results.map(item=>{\r\n                    //console.log(item.countryEnglishName)\r\n                    if (item.countryName === '中国') {\r\n                        if (item.locationId === 951001) {\r\n                            return {\r\n                                name: item.countryName,\r\n                                value: [item.deadCount,item.curedCount, item.currentConfirmedCount,item.confirmedCount]\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            name:item.countryName,\r\n                            value:[item.deadCount,item.curedCount, item.currentConfirmedCount,item.confirmedCount]\r\n                        }\r\n                    }\r\n                })\r\n                \r\n                dataSet.push({name: '朝鲜', value: [0,0,0,0]});\r\n                dataSet.push({name: '莱索托', value: [0,0,0,0]});\r\n                dataSet.push({name: '西撒哈拉', value: [0,0,0,0]});\r\n                console.log(dataSet)\r\n                /*\r\n                for (var location of myJson.locations) {\r\n                    var message = new Map();\r\n                    message['name'] = location.country;\r\n                    message['value'] =  [location.latest['confirmed'], location.latest['deaths'], location.latest['recovered']];\r\n                    data.push(message);\r\n                    message = new Map();\r\n                }\r\n\r\n                this.setState({dataset : data}, function() {\r\n                    console.log(this.state.dataset);\r\n                });\r\n                \r\n                return data;\r\n                */\r\n               \r\n               const options = {\r\n\r\n                title: {\r\n                    sublink: 'http://esa.un.org/wpp/Excel-Data/population.htm',\r\n                    left: 'center',\r\n                    top: 'top'\r\n                },\r\n                tooltip: {\r\n                    \r\n                     trigger: 'item',\r\n                     formatter: function (params) {\r\n                         console.log(params)\r\n                         //return params.name\r\n                         \r\n                         \r\n                         if (!params.data) {\r\n                             return null;\r\n                         } else {\r\n                            return params.name + ' : ' + '<br/>' + 'confirmed: ' + params.data.value[3] + '<br/>' + 'death: ' + params.data.value[0] + '<br/>' + 'recovered: ' + params.data.value[1] + '<br/>' + 'currentconfirmed: ' + params.data.value[2];\r\n                         }\r\n                         \r\n                     }\r\n                 },\r\n            \r\n                visualMap: {\r\n                    min: 0,\r\n                    max: 4000000,\r\n                    text: ['High', 'Low'],\r\n                    realtime: false,\r\n                    calculable: true,\r\n                    inRange: {\r\n                        color: ['rgb(229, 152, 102)', 'rgb(160, 64, 0)','rgb(110, 44, 0)'],\r\n                        \r\n                    }\r\n                },\r\n                series: [\r\n                    {\r\n                        name: 'Coronavirus-19',\r\n                        type: 'map',\r\n                        mapType: 'world',\r\n                        roam: true,\r\n                        itemStyle: {\r\n                            emphasis: {label: {show: true}}\r\n                        },\r\n                        data: dataSet,\r\n                        nameMap: {\r\n                            'Afghanistan': '阿富汗',\r\n                            'Angola': '安哥拉',\r\n                            'Albania': '阿尔巴尼亚',\r\n                            'United Arab Emirates': '阿联酋',\r\n                            'Argentina': '阿根廷',\r\n                            'Armenia': '亚美尼亚',\r\n                            'French Southern and Antarctic Lands': '法属南半球和南极领地',\r\n                            'Australia': '澳大利亚',\r\n                            'Austria': '奥地利',\r\n                            'Azerbaijan': '阿塞拜疆',\r\n                            'Burundi': '布隆迪共和国',\r\n                            'Belgium': '比利时',\r\n                            'Benin': '贝宁',\r\n                            'Burkina Faso': '布基纳法索',\r\n                            'Bangladesh': '孟加拉国',\r\n                            'Bulgaria': '保加利亚',\r\n                            'The Bahamas': '巴哈马',\r\n                            'Bosnia and Herz.': '波斯尼亚和黑塞哥维那',\r\n                            'Belarus': '白俄罗斯',\r\n                            'Belize': '伯利兹',\r\n                            'Bermuda': '百慕大',\r\n                            'Bolivia': '玻利维亚',\r\n                            'Brazil': '巴西',\r\n                            'Brunei': '文莱',\r\n                            'Bhutan': '不丹',\r\n                            'Botswana': '博茨瓦纳',\r\n                            'Central African Republic': '中非共和国',\r\n                            'Canada': '加拿大',\r\n                            'Switzerland': '瑞士',\r\n                            'Chile': '智利',\r\n                            'China': '中国',\r\n                            'Ivory Coast': '象牙海岸',\r\n                            'Cameroon': '喀麦隆',\r\n                            'Congo (Brazzaville)': '刚果（布）',\r\n                            'Congo (Kinshasa)': '刚果（金）',\r\n                            'Colombia': '哥伦比亚',\r\n                            'Costa Rica': '哥斯达黎加',\r\n                            'Cuba': '古巴',\r\n                            'Northern Cyprus': '北塞浦路斯',\r\n                            'Cyprus': '塞浦路斯',\r\n                            'Czech Republic': '捷克共和国',\r\n                            'Germany': '德国',\r\n                            'Djibouti': '吉布提',\r\n                            'Denmark': '丹麦',\r\n                            'Dominican Republic': '多米尼加',\r\n                            'Algeria': '阿尔及利亚',\r\n                            'Ecuador': '厄瓜多尔',\r\n                            'Egypt': '埃及',\r\n                            'Eritrea': '厄立特里亚',\r\n                            'Spain': '西班牙',\r\n                            'Estonia': '爱沙尼亚',\r\n                            'Ethiopia': '埃塞俄比亚',\r\n                            'Finland': '芬兰',\r\n                            'Fiji': '斐',\r\n                            'Falkland Islands': '福克兰群岛',\r\n                            'France': '法国',\r\n                            'Gabon': '加蓬',\r\n                            'United Kingdom': '英国',\r\n                            'Georgia': '格鲁吉亚',\r\n                            'Ghana': '加纳',\r\n                            'Guinea': '几内亚',\r\n                            'Gambia': '冈比亚',\r\n                            'Guinea Bissau': '几内亚比绍',\r\n                            'Equatorial Guinea': '赤道几内亚',\r\n                            'Greece': '希腊',\r\n                            'Greenland': '格陵兰',\r\n                            'Guatemala': '危地马拉',\r\n                            'French Guiana': '法属圭亚那',\r\n                            'Guyana': '圭亚那',\r\n                            'Honduras': '洪都拉斯',\r\n                            'Croatia': '克罗地亚',\r\n                            'Haiti': '海地',\r\n                            'Hungary': '匈牙利',\r\n                            'Indonesia': '印度尼西亚',\r\n                            'India': '印度',\r\n                            'Ireland': '爱尔兰',\r\n                            'Iran': '伊朗',\r\n                            'Iraq': '伊拉克',\r\n                            'Iceland': '冰岛',\r\n                            'Israel': '以色列',\r\n                            'Italy': '意大利',\r\n                            'Jamaica': '牙买加',\r\n                            'Jordan': '约旦',\r\n                            'Japan': '日本',\r\n                            'Kazakhstan': '哈萨克斯坦',\r\n                            'Kenya': '肯尼亚',\r\n                            'Kyrgyzstan': '吉尔吉斯斯坦',\r\n                            'Cambodia': '柬埔寨',\r\n                            'Korea': '韩国',\r\n                            'Kosovo': '科索沃',\r\n                            'Kuwait': '科威特',\r\n                            'Laos': '老挝',\r\n                            'Lebanon': '黎巴嫩',\r\n                            'Liberia': '利比里亚',\r\n                            'Libya': '利比亚',\r\n                            'Sri Lanka': '斯里兰卡',\r\n                            'Lesotho': '莱索托',\r\n                            'Lithuania': '立陶宛',\r\n                            'Luxembourg': '卢森堡',\r\n                            'Latvia': '拉脱维亚',\r\n                            'Morocco': '摩洛哥',\r\n                            'Moldova': '摩尔多瓦',\r\n                            'Madagascar': '马达加斯加',\r\n                            'Mexico': '墨西哥',\r\n                            'Macedonia': '北马其顿',\r\n                            'Mali': '马里',\r\n                            'Myanmar': '缅甸',\r\n                            'Montenegro': '黑山',\r\n                            'Mongolia': '蒙古',\r\n                            'Mozambique': '莫桑比克',\r\n                            'Mauritania': '毛里塔尼亚',\r\n                            'Malawi': '马拉维',\r\n                            'Malaysia': '马来西亚',\r\n                            'Namibia': '纳米比亚',\r\n                            'New Caledonia': '新喀里多尼亚',\r\n                            'Niger': '尼日尔',\r\n                            'Nigeria': '尼日利亚',\r\n                            'Nicaragua': '尼加拉瓜',\r\n                            'Netherlands': '荷兰',\r\n                            'Norway': '挪威',\r\n                            'Nepal': '尼泊尔',\r\n                            'New Zealand': '新西兰',\r\n                            'Oman': '阿曼',\r\n                            'Pakistan': '巴基斯坦',\r\n                            'Panama': '巴拿马',\r\n                            'Peru': '秘鲁',\r\n                            'Philippines': '菲律宾',\r\n                            'Papua New Guinea': '巴布亚新几内亚',\r\n                            'Poland': '波兰',\r\n                            'Puerto Rico': '波多黎各',\r\n                            'Dem. Rep. Korea': '朝鲜',\r\n                            'Portugal': '葡萄牙',\r\n                            'Paraguay': '巴拉圭',\r\n                            'Qatar': '卡塔尔',\r\n                            'Romania': '罗马尼亚',\r\n                            'Russia': '俄罗斯',\r\n                            'Rwanda': '卢旺达',\r\n                            'W. Sahara': '西撒哈拉',\r\n                            'Saudi Arabia': '沙特阿拉伯',\r\n                            'Sudan': '苏丹',\r\n                            'South Sudan': '南苏丹',\r\n                            'Senegal': '塞内加尔',\r\n                            'Solomon Islands': '所罗门群岛',\r\n                            'Sierra Leone': '塞拉利昂',\r\n                            'El Salvador': '萨尔瓦多',\r\n                            'Somaliland': '索马里兰',\r\n                            'Somalia': '索马里',\r\n                            'Serbia': '塞尔维亚',\r\n                            'Suriname': '苏里南',\r\n                            'Slovakia': '斯洛伐克',\r\n                            'Slovenia': '斯洛文尼亚',\r\n                            'Sweden': '瑞典',\r\n                            'Swaziland': '斯威士兰',\r\n                            'Syria': '叙利亚',\r\n                            'Chad': '乍得',\r\n                            'Togo': '多哥',\r\n                            'Thailand': '泰国',\r\n                            'Tajikistan': '塔吉克斯坦',\r\n                            'Turkmenistan': '土库曼斯坦',\r\n                            'Timor-Leste': '东帝汶',\r\n                            'Trinidad and Tobago': '特立尼达和多巴哥',\r\n                            'Tunisia': '突尼斯',\r\n                            'Turkey': '土耳其',\r\n                            'United Republic of Tanzania': '坦桑尼亚联合共和国',\r\n                            'Uganda': '乌干达',\r\n                            'Ukraine': '乌克兰',\r\n                            'Uruguay': '乌拉圭',\r\n                            'United States of America': '美国',\r\n                            'Uzbekistan': '乌兹别克斯坦',\r\n                            'Venezuela': '委内瑞拉',\r\n                            'Vietnam': '越南',\r\n                            'Vanuatu': '瓦努阿图',\r\n                            'West Bank': '西岸',\r\n                            'Yemen': '也门共和国',\r\n                            'South Africa': '南非',\r\n                            'Zambia': '赞比亚共和国',\r\n                            'Zimbabwe': '津巴布韦',\r\n                            'Tanzania': '坦桑尼亚',\r\n                            'Cote dIvoire': '科特迪瓦',\r\n                            'Guinea-Bissau': '塞拉利昂',\r\n                            'Czech Rep.': '捷克',\r\n                            'Lao PDR': '老挝',\r\n                            'Bahamas': '巴哈马',\r\n                            'Solomon Is.': '所罗门',\r\n                            'Saint Lucia': '圣卢西亚',\r\n                            'Barbados': '巴巴多斯',\r\n                            'St. Vin. and Gren.': '圣文森特和格林纳丁斯',\r\n                            'Grenada': '格林那达',\r\n                            'Cape Verde': '佛得角',\r\n                            'São Tomé and Principe': '圣多美和普林西比',\r\n                            \"S. Geo. and S. Sandw. Is.\": \"南乔治亚岛和南桑威奇群岛\",\r\n                            \"Falkland Is.\": \"马尔维纳斯群岛（福克兰）\",\r\n                            \"Dominica\": \"多米尼加\",\r\n                            \"Antigua and Barb.\": \"安提瓜和巴布达\",\r\n                            \"Montserrat\": \"蒙特塞拉特\",\r\n                            \"Faeroe Is.\": \"法罗群岛\",\r\n                        },\r\n                    \r\n                    }\r\n                ]\r\n                \r\n            };\r\n            myChart.setOption(options);\r\n            \r\n            })\r\n    }\r\n    render() {\r\n        return(\r\n                <div id=\"main\"></div>\r\n        )\r\n    }\r\n}\r\nexport default Map;\r\n\r\n\r\n","import React, {Component} from 'react'\r\nimport './style.css'\r\n\r\nclass WorldData extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          confirmed: 0,\r\n          death: 0\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://coronavirus-tracker-api.herokuapp.com/v2/locations')\r\n            .then(function(response) {\r\n                return response.json();\r\n            })\r\n            .then((myjson) => {\r\n                this.setState({confirmed: myjson.latest.confirmed, death: myjson.latest.deaths})\r\n                console.log(this.state);\r\n                //return myjson.latest;\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"world-data\">\r\n                <div id=\"data1\">全球新冠肺炎确诊人数：<span>{this.state.confirmed}</span></div>\r\n                <div id=\"data2\">全球新冠肺炎死亡人数：<span>{this.state.death}</span>  </div>\r\n                <div id=\"data3\">国家和地区数：<span>188</span></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WorldData;","import React ,  { Component } from 'react';\nimport Map from './components/Map';\nimport WorldData from './components/WorldData';\nimport { Tabs } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { TabPane } = Tabs;\n\nclass App extends Component {\n\n  componentDidMount() {\n    \n  }\n\n  render() {\n\n    return (\n      <Tabs defaultActiveKey=\"1\" tabPosition=\"bottom\">\n        <TabPane tab=\"世界疫情概览\" key=\"1\">\n          <WorldData></WorldData>\n        </TabPane>\n        <TabPane tab=\"世界疫情地图\" key=\"2\">\n          <Map></Map>\n        </TabPane>\n      </Tabs>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}